const config = require('../config');
const { cmd, commands } = require('../command');
const os = require("os");
const fs = require('fs');
const googleTTS = require('google-tts-api');
const { runtime } = require('../lib/functions');
const axios = require('axios');
 
;
// group menu

cmd({
    pattern: "gmenu",
    desc: "menu the bot",
    category: "menu",
    react: "‚§µÔ∏è",
    filename: __filename
}, 
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, pushname, reply }) => {
    try
       {
        let dec =   `‚ñë‚ñë‚ñë *ùóöùó•ùó¢ùó®ùó£ ùó†ùóòùó°ùó®* ‚ñë‚ñë‚ñë\n\n‚ó¶ *grouplink* üîó  \n   _Example:_ grouplink [Query]  \n‚ó¶ *kickall* üö´  \n   _Example:_ kickall [Query]  \n‚ó¶ *kickall2* üö´  \n   _Example:_ kickall2 [Query]  \n‚ó¶ *kickall3* üö´  \n   _Example:_ kickall3 [Query]  \n‚ó¶ *add* ‚ûï  \n   _Example:_ add [Query]  \n‚ó¶ *remove* ‚ûñ  \n   _Example:_ remove [Query]  \n‚ó¶ *kick* üë¢  \n   _Example:_ kick [Query]  \n‚ó¶ *promote* ‚¨ÜÔ∏è  \n   _Example:_ promote [Query]  \n‚ó¶ *demote* ‚¨áÔ∏è  \n   _Example:_ demote [Query]  \n‚ó¶ *dismiss* üö™  \n   _Example:_ dismiss [Query]  \n‚ó¶ *revoke* ‚õî  \n   _Example:_ revoke [Query]  \n‚ó¶ *setgoodbye* üëã  \n   _Example:_ setgoodbye [Query]  \n‚ó¶ *setwelcome* üéâ  \n   _Example:_ setwelcome [Query]  \n‚ó¶ *delete* üóëÔ∏è  \n   _Example:_ delete [Query]  \n‚ó¶ *getpic* üì∏  \n   _Example:_ getpic [Query]  \n‚ó¶ *ginfo* ‚ÑπÔ∏è  \n   _Example:_ ginfo [Query]  \n‚ó¶ *disappear on* üåü  \n   _Example:_ disappear on [Query]  \n‚ó¶ *disappear off* üí®  \n   _Example:_ disappear off [Query]  \n‚ó¶ *disappear 7D,24H* ‚è∞  \n   _Example:_ disappear 7D,24H [Query]  \n‚ó¶ *allreq* üåê  \n   _Example:_ allreq [Query]  \n‚ó¶ *updategname* üìù  \n   _Example:_ updategname [Query]  \n‚ó¶ *updategdesc* üìÑ  \n   _Example:_ updategdesc [Query]  \n‚ó¶ *joinrequests* üì©  \n   _Example:_ joinrequests [Query]  \n‚ó¶ *senddm* ‚úâÔ∏è  \n   _Example:_ senddm [Query]  \n‚ó¶ *nikal* üö™  \n   _Example:_ nikal [Query]  \n‚ó¶ *mute* üîá  \n   _Example:_ mute [Query]  \n‚ó¶ *unmute* üîä  \n   _Example:_ unmute [Query]  \n‚ó¶ *lockgc* üîí  \n   _Example:_ lockgc [Query]  \n‚ó¶ *unlockgc* üîì  \n   _Example:_ unlockgc [Query]  \n‚ó¶ *invite* ‚úâÔ∏è  \n   _Example:_ invite [Query]  \n‚ó¶ *tag* üè∑Ô∏è  \n   _Example:_ tag [Query]  \n‚ó¶ *hidetag* üëÄ  \n   _Example:_ hidetag [Query]  \n‚ó¶ *tagall* üì¢  \n   _Example:_ tagall [Query]  \n‚ó¶ *tagadmins* üõ°Ô∏è  \n   _Example:_ tagadmins [Query]  \n‚ú¶\n‚ñë‚ñë‚ñë n${config.BOT_NAME} ‚ñë‚ñë‚ñë\n> ${config.DESCRIPTION}`;

        await conn.sendMessage(
            from,
            {
                image: { url: 'https://i.ibb.co/5g7VGhC9/Picsart-25-01-30-13-20-52-736.png' },
                caption: dec,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: false,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363376871871901@newsletter',             newsletterName: '·¥Ñ·¥è·¥Ö·¥á·¥Ö  ô è ·¥õ ú·¥Ä Ä…™…¥·¥Ö·¥ú  ü…™ è·¥Ä…¥·¥Ä…¢·¥á',
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );

    } catch (e) {
        console.log(e);
        reply(`${e}`);
    }
});

// fun menu
// other menu

// main menu

cmd({
    pattern: "menu",
    desc: "menu the bot",
    category: "menu",
    react: "‚úÖ",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, pushname, reply }) => {
    try {
        // Send voice message from data/Ai.mp3
        const voiceFilePath = 'data/Ai.mp3';
        await conn.sendMessage(from, {
            audio: { url: voiceFilePath },
            mimetype: "audio/mp4",
            ptt: true
        }, { quoted: mek });

    } catch (e) {
        console.error(e);
        reply(`‚ùå An error occurred: ${e.message}`);
    }
});



// anmie menu 


// ai menu 

cmd({
    pattern: "aimenu",
    desc: "menu the bot",
    category: "menu",
    react: "ü§ñ",
    filename: __filename
}, 
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, pushname, reply }) => {
    try {
        let dec = `‚ñë ùóîùóú ùó†ùóòùó°ùó® ‚ñë\n\n‚ó¶ *ai* ü§ñ  \n   _Example:_ ai [Query]  \n‚ó¶ *meta* üåê  \n   _Example:_ meta [Query]  \n‚ó¶ *gpt4* üí°  \n   _Example:_ gpt4 [Query]  \n‚ó¶ *bing* üîç  \n   _Example:_ bing [Query]  \n‚ó¶ *copilot* üß≠  \n   _Example:_ copilot [Query]  \n‚ú¶\n‚ñë‚ñë‚ñë n${config.BOT_NAME} ‚ñë‚ñë‚ñë\n> ${config.DESCRIPTION}`;

        await conn.sendMessage(
            from,
            {
                image: { url: 'https://i.ibb.co/5g7VGhC9/Picsart-25-01-30-13-20-52-736.png' },
                caption: dec,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: false,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363376871871901@newsletter',             newsletterName: '·¥Ñ·¥è·¥Ö·¥á·¥Ö  ô è ·¥õ ú·¥Ä Ä…™…¥·¥Ö·¥ú  ü…™ è·¥Ä…¥·¥Ä…¢·¥á',
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );

    } catch (e) {
        console.log(e);
        reply(`${e}`);
    }
});

